name: Despliegue a face-ubb

on:
#   push:
#     branches:
#       - main
  workflow_dispatch:

jobs:
  deploy:
    environment: production
    runs-on: ubuntu-latest
    steps:
      - name: Instalar dependencias (OpenVPN, SSH y sshpass)
        run: |
          sudo apt update -qq > /dev/null 2>&1
          sudo apt install -y -qq openvpn openvpn-systemd-resolved openssh-client sshpass

      - name: Crear archivo de configuración OpenVPN
        run: echo "${{ secrets.OPENVPN_CONFIG }}" > /dev/shm/face-ubb.ovpn

      - name: Conexion a la VPN de la UBB
        uses: kota65535/github-openvpn-connect-action@v3.1.0
        timeout-minutes: 2
        continue-on-error: false
        with:
          config_file: /dev/shm/face-ubb.ovpn
          username: ${{ secrets.OPENVPN_USERNAME }}
          password: ${{ secrets.OPENVPN_PASSWORD }}

      - name: Eliminar archivo de configuración OpenVPN (temporal VPN)
        if: always()
        run: rm -f /dev/shm/face-ubb.ovpn

      - name: Crear archivos .env temporales para scp
        run: |
          printf '%s' "${{ secrets.ENV_FRONTEND_CONTENT }}" > /dev/shm/frontend.env.tmp
          printf '%s' "${{ secrets.ENV_BACKEND_CONTENT }}" > /dev/shm/backend.env.tmp
        shell: bash

      - name: Copiar archivos .env al servidor remoto
        env:
          PROD_HOST: ${{ secrets.PROD_HOST }}
          PROD_USER: ${{ secrets.PROD_USER }}
          PROD_PASSWORD: ${{ secrets.PROD_PASSWORD }}
          PROD_PORT: ${{ secrets.PROD_PORT }}
          REMOTE_REPO_NAME: ${{ secrets.NOMBRE_REPOSITORIO || 'Proyecto' }}
        run: |
          APP_DIR_REMOTE="/home/$PROD_HOST/$REMOTE_REPO_NAME"
          ENV_FILE_BACKEND_REMOTE="$APP_DIR_REMOTE/backend/src/config/.env"
          ENV_FILE_FRONTEND_REMOTE="$APP_DIR_REMOTE/frontend/.env"

          echo "Copiando .env de frontend a $PROD_USER@$PROD_HOST:$ENV_FILE_FRONTEND_REMOTE"
          sshpass -p "$PROD_PASSWORD" scp \
            -o StrictHostKeyChecking=no \
            -P "$PROD_PORT" \
            /dev/shm/frontend.env.tmp "$PROD_USER@$PROD_HOST:$ENV_FILE_FRONTEND_REMOTE"

          echo "Copiando .env de backend a $PROD_USER@$PROD_HOST:$ENV_FILE_BACKEND_REMOTE"
          sshpass -p "$PROD_PASSWORD" scp \
            -o StrictHostKeyChecking=no \
            -P "$PROD_PORT" \
            /dev/shm/backend.env.tmp "$PROD_USER@$PROD_HOST:$ENV_FILE_BACKEND_REMOTE"

      - name: Eliminar archivos .env temporales del runner
        if: always()
        run: |
          rm -f /dev/shm/frontend.env.tmp
          rm -f /dev/shm/backend.env.tmp

      - name: Ejecutar despliegue (script remoto)
        env:
          PASS_GIT_COMMIT_SHA: ${{ github.sha }}
          REMOTE_REPO_NAME: ${{ secrets.NOMBRE_REPOSITORIO || 'Proyecto' }}
        run: |
          export GH_ARG_GIT_COMMIT_SHA="${{ env.PASS_GIT_COMMIT_SHA }}"

          sshpass -p "${{ secrets.PROD_PASSWORD }}" ssh \
          -q \
          -o StrictHostKeyChecking=no \
          -p ${{ secrets.PROD_PORT }} \
          ${{ secrets.PROD_USER }}@${{ secrets.PROD_HOST }} \
          bash -s -- \
          "$GH_ARG_GIT_COMMIT_SHA" \
          << 'EOF'
            set -euo pipefail

            ARG_GIT_COMMIT_SHA="$1"
            
            export NVM_DIR="$HOME/.nvm"
            if [ -s "$NVM_DIR/nvm.sh" ]; then
              echo "Cargando nvm..."
              . "$NVM_DIR/nvm.sh"
            else
              echo "Advertencia: nvm no encontrado. Asumiendo node/npm en PATH."
            fi
            
            if ! command -v npm &> /dev/null; then
                echo "Error: npm no encontrado."
                exit 1
            fi

            APP_DIR="/home/$PROD_HOST/$REMOTE_REPO_NAME"
            
            # 1. Actualizar código
            cd "$APP_DIR"
            git fetch origin
            git reset --hard "$ARG_GIT_COMMIT_SHA" 
            
            # 2. y 3. Los archivos .env ya fueron creados por scp.
            ENV_FILE_BACKEND="$APP_DIR/backend/src/config/.env"
            ENV_FILE_FRONTEND="$APP_DIR/frontend/.env"
            if [ ! -f "$ENV_FILE_BACKEND" ]; then
              echo "ERROR: El archivo .env de backend no fue encontrado en $ENV_FILE_BACKEND después de scp."
              exit 1
            else
              echo "Archivo .env de backend encontrado en $ENV_FILE_BACKEND."
            fi
            if [ ! -f "$ENV_FILE_FRONTEND" ]; then
              echo "ERROR: El archivo .env de frontend no fue encontrado en $ENV_FILE_FRONTEND después de scp."
              exit 1
            else
              echo "Archivo .env de frontend encontrado en $ENV_FILE_FRONTEND."
            fi
            
            # 4. Instalar dependencias del backend
            cd "$APP_DIR/backend"
            npm ci

            # 5. Reiniciar backend
            pm2 restart app-backend || pm2 start src/index.js --name "app-backend"
            
            # 6. Instalar dependencias y contruir frontend
            cd "$APP_DIR/frontend"
            npm ci
            npm run build

            # 7. Reiniciar frontend
            pm2 restart app-frontend || pm2 start npm --name "app-frontend" -- run preview
            
            echo "Despliegue completado en $(date)"
          EOF

      - name: Limpieza final (VPN)
        if: always()
        run: |
          sudo pkill openvpn || true
          # rm -f /tmp/ubb-vpn.ovpn